# Objective
## Goal
## Sucess criteria
# Background
# Scoope
# Design
## Overview
## Infrastructure
## Detaled Design
## Expansion / Adaptability
## Dependencies
    * Free RTOS
    * espidf
# Standards
 ## Python
 ## C/C++
    **When should I use C or C++?**
    To handle libraries that are alreay in C++ we will keep ore files in C++ but your code should bee writen as stimply as possable
    Because of that try to use C as much as possable. Only use C++ if you need its exclusice features 
 ### Power of ten
    The rules are intended to eliminate certain C coding practices that make code difficult to review or statically analyze.
    The bellow rules have been modified in italic to better fit this **project**
    1. Avoid complex flow constructs, such as goto and recursion.
    2. All loops must have fixed bounds. This prevents runaway code.
    3. *Try to* Avoid heap memory allocation after initialization.
    4. Restrict functions to a single printed page.
    5. Use a minimum of two runtime assertions per function.
    6. Restrict the scope of data to the smallest possible.
    7. Check the return value of all non-void functions, or cast to void to indicate the return value is useless.
    8. Use the preprocessor only for header files and simple macros. *macros to enforce project rules are allowed and will be exclusively contained in the standards.h*
    9. Limit pointer use to a single dereference, and do not use function pointers. *They are only allowed in a **static const** context*
    10. Compile with all possible warnings active; all warnings should then be addressed before release of the software.
    **Custom**
    1. Use of "prinf" , "fprintf", "vprintf" , and "vfprintf" are forbidden. Use "PrintToPi" Insted
    2. Any change to the Shipping.c and Shipping.h or its instantiation in main.cpp needs to be reviewed by two project managers
    3. Use of c++ strings is bannded
    4. insted of useing "malloc" and "free" use "pvPortMalloc" and "vPortFree"

    ALL pull requests must meet these standards! 